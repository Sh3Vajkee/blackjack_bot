import datetime as dt
import logging
from textwrap import dedent

import pytz
from aiogram import Dispatcher, types
from db.models import BJGame, Player
from keyboars import new_game_kb
from middlewares.throttling import rate_limit
from sqlalchemy import select


@rate_limit(1)
async def start_cmd(m: types.Message):
    text = """
    üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>BlackJackBot</b>!
    
    /rules - üìã –ø—Ä–∞–≤–∏–ª–∞
    /top - üèÜ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
    /history - üë§ –ø—Ä–æ—Ñ–∏–ª—å
    /donate - –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç

    ‚ÑπÔ∏è <i>–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—Å–∞—Ç—å @Tshque</i>
    """
    await m.answer(dedent(text), reply_markup=new_game_kb)

    db = m.bot.get("db")

    async with db() as ssn:
        plr = await ssn.get(Player, m.from_user.id)
        if not plr:
            date = int(dt.datetime.now(
                pytz.timezone("Europe/Moscow")).timestamp())
            await ssn.merge(Player(plr_id=m.from_user.id, join_date=date, last_activity=date))
            await ssn.commit()
            logging.info(f"New Player with ID: {m.from_user.id}")
        await ssn.close()


@rate_limit(1)
async def rules_cmd(m: types.Message):
    db = m.bot.get("db")

    async with db() as ssn:
        plr = await ssn.get(Player, m.from_user.id)
        if not plr:
            await ssn.merge(Player(plr_id=m.from_user.id))
            await ssn.commit()
            logging.info(f"New Player with ID: {m.from_user.id}")
        await ssn.close()

    text = """
    üìã –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ BlackJack

    –í –∏–≥—Ä–µ –Ω–µ–±—Ö–æ–¥–∏–º–æ –Ω–∞–±—Ä–∞—Ç—å <b>21 –æ—á–∫–æ</b>.

    –î–∏–ª–µ—Ä —Ä–∞–∑–¥–∞–µ—Ç –¥–≤–µ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫—É –∏ –¥–≤–µ —Å–µ–±–µ, –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö –≤–∑–∞–∫—Ä—ã—Ç—É—é. 
    –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–µ –¥–≤–µ –∫–∞—Ä—Ç—ã —É –∏–≥—Ä–æ–∫–∞ –¥–∞–¥—É—Ç –≤ —Å—É–º–º–µ 21 –æ—á–∫–æ–≤, —Ç–æ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–±–µ–∂–¥–∞–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç 15 –æ—á–∫–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞,
    –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –¥–∏–ª–µ—Ä–∞ —Ç–æ–∂–µ –Ω–µ—Ç 21 –æ—á–∫–∞ —Å –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –∫–∞—Ä—Ç. –ï—Å–ª–∏ –∂–µ —É –¥–∏–ª–µ—Ä–∞ 21 –æ—á–∫–æ–≤ —Å —Ä–∞–∑–¥–∞—á–∏,
    –∞ —É –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç, —Ç–æ –∏–≥—Ä–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç 10 –æ—á–∫–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞.

    –ï—Å–ª–∏ –∂–µ –∏–∑ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –∫–∞—Ä—Ç –≤—ã–ø–∞–¥–µ—Ç –¥–≤–∞ —Ç—É–∑–∞ (AA), —Ç–æ —ç—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –¥–∞–µ—Ç 22 –æ—á–∫–∞. –¢–æ—Ç, —É –∫–æ–≥–æ –≤—ã–ø–∞–ª–∞ —ç—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è
    –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –∞–≤—Ç–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –µ—Å–ª–∏:
        - <u>—É –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ 22 –æ—á–∫–∞</u> (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –Ω–∏—á—å—è)
        - <u>—É –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ 21 –æ—á–∫–∞</u> (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Ç–æ—Ç, —É –∫–æ–≥–æ 22 –æ—á–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –≤—ã—à–µ –ø–æ —Å—Ç–∞—Ä—à–∏–Ω—Å—Ç–≤—É)
    
    –ï—Å–ª–∏ –∂–µ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –Ω–∏–∫–æ–º—É –Ω–µ –≤—ã–ø–∞–¥–∞–µ—Ç 21 –∏–ª–∏ 22 –æ—á–∫–∞, —Ç–æ –∏–≥—Ä–æ–∫ —Ä–µ—à–∞–µ—Ç, —á—Ç–æ –µ–º—É –¥–µ–ª–∞—Ç—å: –¥–æ–±–∏—Ä–∞—Ç—å –µ—â–µ –∫–∞—Ä—Ç—É, –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å.
    –ï—Å–ª–∏ –ø–æ—Å–ª–µ –¥–æ–±–æ—Ä–∞ —Å—É–º–º–∞ –æ—á–∫–æ–≤ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ 21, —Ç–æ –∏–≥—Ä–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç.
    –ï—Å–ª–∏ –ø–æ—Å–ª–µ –¥–æ–±–æ—Ä–∞ —Å—É–º–º–∞ –æ—á–∫–æ–≤ –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞ 21, —Ç–æ –¥–æ–±–∏—Ä–∞—Ç—å –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –∏ —Å–º–æ—Ç—Ä—è—Ç –∫–∞—Ä—Ç—ã —É –¥–∏–ª–µ—Ä–∞, –∏ –µ—Å–ª–∏ —Ç–∞–º –±—É–¥–µ—Ç 21, —Ç–æ –Ω–∏—á—å—è,
    –∞ –µ—Å–ª–∏ –º–µ–Ω—å—à–µ –∏–ª–∏ –ø–µ—Ä–µ–±–æ—Ä, —Ç–æ –∏–≥—Ä–æ–∫ –ø–æ–±–µ–∂–¥–∞–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç 10 –æ—á–∫–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–∞

    –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞—Ä—Ç:
    <i>2, 3, 4, 5, 6, 7, 8, 9, 10</i> - –¥–∞—é—Ç —Ç–æ–∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤, —á—Ç–æ –∏ —Ü–∏—Ñ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
    <i>J, Q, K</i> - –¥–∞—é—Ç 10 –æ—á–∫–æ–≤
    <i>A</i> - –¥–∞–µ—Ç 1 –∏–ª–∏ 11 –æ—á–∫–æ–≤:
        - <u>11 –æ—á–∫–æ–≤</u> - –ø—Ä–∏ —Ä–∞–∑–¥–∞—á–µ –∫–∞—Ä—Ç, –∏–ª–∏ –µ—Å–ª–∏ –ø–æ—Å–ª–µ –¥–æ–±–æ—Ä–∞ —Ç—É–∑–∞ (–ê) –Ω–µ—Ç –ø–µ—Ä–µ–±–æ—Ä–∞
        - <u>1 –æ—á–∫–æ</u> - –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ –¥–æ–±–æ—Ä–∞ —Ç—É–∑–∞ (–ê) –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–±–æ—Ä
    
    ‚ô¶Ô∏è –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∏–≥—Ä–µ - –Ω–∞–∂–º–∏—Ç–µ   /start


    ‚ÑπÔ∏è <i>–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—Å–∞—Ç—å @Tshque</i>
    """
    await m.answer(dedent(text))


@rate_limit(1)
async def top_cmd(m: types.Message):
    db = m.bot.get("db")

    async with db() as ssn:
        plr = await ssn.get(Player, m.from_user.id)
        if not plr:
            await ssn.merge(Player(plr_id=m.from_user.id))
            await ssn.commit()
            logging.info(f"New Player with ID: {m.from_user.id}")

        top_q = await ssn.execute(select(Player).order_by(Player.rating.desc()))
        top = top_q.scalars().all()
        await ssn.close()

    medal = ["ü•á", "ü•à", "ü•â", "üîπ", "üîπ", "üÉè"]
    players = []
    count = 1
    for plr in top:
        if plr.plr_id == m.from_user.id:
            plr_place = count
            plr_points = plr.rating
            if count <= 5:
                plr_medal = medal[count-1]
            else:
                plr_medal = medal[-1]
        if count <= 5:
            players.append(
                f"{medal[count-1]} {count}. ID:{plr.plr_id} - <b>{plr.rating}</b>")

        count += 1

    txt = "üèÜ <b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n" + \
        "\n".join(
            players) + f"\n\n<b>. . .</b>\n\n{plr_medal} {plr_place}. –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ - <b>{plr_points}</b>\n\n\n‚ÑπÔ∏è <i>–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—Å–∞—Ç—å @Tshque</i>\n/donate - –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"

    await m.answer(txt, reply_markup=new_game_kb)


@rate_limit(1)
async def games_history(m: types.Message):
    db = m.bot.get("db")

    async with db() as ssn:
        plr = await ssn.get(Player, m.from_user.id)
        if not plr:
            await ssn.merge(Player(plr_id=m.from_user.id))
            await ssn.commit()
            logging.info(f"New Player with ID: {m.from_user.id}")
            plr_rating = 1000
            plr_total_games = 0

        else:
            plr_rating = plr.rating
            plr_total_games = plr.total_games

        games_query = await ssn.execute(select(BJGame).order_by(BJGame.game_id.desc()).filter(
            BJGame.player.has(Player.plr_id == m.from_user.id)).limit(10))
        games = games_query.scalars().all()

        plr = await ssn.get(Player, m.from_user.id)
        plr_rating = plr.rating
        plr_total_games = plr.total_games
        await ssn.close()

    if len(games) > 0:
        game_txts = []
        for game in games:

            if game.result == "player_win":
                ico = "üü¢ WIN   - "
            elif game.result == "player_lose":
                ico = "üî¥ LOSE - "
            elif game.result == "tie":
                ico = "‚ö™ TIE     - "
            else:
                ico = "‚ùî OPEN - "

            game_txts.append(f"{ico} –°—Ç–æ–ª ‚Ññ<u>{game.game_id}</u> ")

        header_txt = f"üë§ –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\nüî• –†–µ–π—Ç–∏–Ω–≥: {plr_rating}\n‚ô¶Ô∏è –í—Å–µ–≥–æ –∏–≥—Ä: {plr_total_games}\n\n"
        txt = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã:\n\n" + \
            "\n".join(game_txt for game_txt in game_txts)

    else:
        txt = "ü•∫ –í—ã –µ—â–µ –Ω–µ —Å—ã–≥—Ä–∞–ª–∏ –Ω–∏–æ–¥–Ω–æ–π –∏–≥—Ä—ã"

    await m.answer(header_txt + txt + "\n\n\n‚ÑπÔ∏è <i>–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—Å–∞—Ç—å @Tshque</i>\n/donate - –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
                   reply_markup=new_game_kb)


@rate_limit(1)
async def supp_project(m: types.Message):
    txt = f"""
    üëç –ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç!

    BTC:
    <code>1N9vLNJUmdmrpQtL8u1h8u5L7hkRvLWuSk</code>

    ETH:
    <code>2e7b75c52bacd1493ffc454c13630d5858274b59</code>
    
    LTC:
    <code>Lh9gaup7WqnVUcRhDrjxQMsKmb2C2kHQ6D</code>

    DOGE:
    <code>DT2QTDbdM8kGQdLuSgur3ZYaMqW9ScozzL</code>

    DASH:
    <code>Xsu56hf48HKYP3m3PPJfGNkPZmYCHwEiJJ</code>
    """

    await m.answer(dedent(txt))


def start_handlers(dp: Dispatcher):
    dp.register_message_handler(start_cmd, commands="start")
    dp.register_message_handler(rules_cmd, commands="rules")
    dp.register_message_handler(top_cmd, commands="top")
    dp.register_message_handler(games_history, commands="history")
    dp.register_message_handler(supp_project, commands="donate")
